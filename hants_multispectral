// Load a collection of Landsat TOA reflectance images.
var landsatCollection = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA')
                        .filterBounds(region);

// The dependent variable we are modeling.
var dependent = 'LST';

// The number of cycles per year to model.
var harmonics = 2;

// Make a list of harmonic frequencies to model.
// These also serve as band name suffixes.
var harmonicFrequencies = ee.List.sequence(1, harmonics);

// stack image collection
var stackCollection = function(collection){
                      var first = ee.Image(collection.first()).select([]);
                      var appendbands = function(image, previous){
                      return ee.Image(previous).addBands(image.reproject('EPSG:4326',null,30));
                      };
                return ee.Image(collection.iterate(appendbands,first));
};

// Function to get a sequence of band names for harmonic terms.
var constructBandNames = function(base, list) {
  return ee.List(list).map(function(i) {
    return ee.String(base).cat(ee.Number(i).int());
  });
};

// Construct lists of names for the harmonic terms.
var cosNames = constructBandNames('cos_', harmonicFrequencies);
var sinNames = constructBandNames('sin_', harmonicFrequencies);

// Independent variables.
var independents = ee.List(['constant', 't'])
  .cat(cosNames).cat(sinNames);

// Function to mask clouds in Landsat 8 imagery.
var maskClouds = function(image) {
  var score = ee.Algorithms.Landsat.simpleCloudScore(image).select('cloud');
  var mask = score.lt(10);
  return image.updateMask(mask);
};

// Function to add an NDVI band, the dependent variable.
var addNDVI = function(image) {
  return image
    .addBands(image.normalizedDifference(['B5', 'B4'])
    .rename('NDVI'))
    .float();
};

// function to add an EVI band, the dependent variable.
var addEVI = function(image){
    return image
     .addBands(image.expression(
       '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))',{
       'NIR': image.select('B5'),
       'RED': image.select('B4'),
       'BLUE': image.select('B2')
      })
    .rename('EVI'))
    .float();
};

// 
var addLST = function(image){
  return image
    .addBands(image.select('B10').subtract(273.15)
    .rename('LST'))
    .float();
};

// Function to add a time band.
var addDependents = function(image) {
  // Compute time in fractional years since the epoch.
  var years = image.date().difference('1970-01-01', 'year');
  var timeRadians = ee.Image(years.multiply(2 * Math.PI)).rename('t');
  var constant = ee.Image(1);
  return image.addBands(constant).addBands(timeRadians.float());
};

// Function to compute the specified number of harmonics
// and add them as bands.  Assumes the time band is present.
var addHarmonics = function(freqs) {
  return function(image) {
    // Make an image of frequencies.
    var frequencies = ee.Image.constant(freqs);
    // This band should represent time in radians.
    var time = ee.Image(image).select('t');
    // Get the cosine terms.
    var cosines = time.multiply(frequencies).cos().rename(cosNames);
    // Get the sin terms.
    var sines = time.multiply(frequencies).sin().rename(sinNames);
    return image.addBands(cosines).addBands(sines);
  };
};

// Filter to the area of interest, mask clouds, add variables.
var harmonicLandsat = landsatCollection
  .filterBounds(corn)
  .map(maskClouds)
  .map(addNDVI)
  .map(addEVI)
  .map(addLST)
  .map(addDependents)
  .map(addHarmonics(harmonicFrequencies));

// The output of the regression reduction is a 4x1 array image.
var harmonicTrend = harmonicLandsat
  .select(independents.add(dependent))
  .reduce(ee.Reducer.linearRegression(independents.length(), 1));

// Turn the array image into a multi-band image of coefficients.
var harmonicTrendCoefficients = harmonicTrend.select('coefficients')
  .arrayProject([0])
  .arrayFlatten([independents]);

// Compute fitted values.
var fittedHarmonic = harmonicLandsat.map(function(image) {
  return image.addBands(
    image.select(independents)
      .multiply(harmonicTrendCoefficients)
      .reduce('sum')
      .rename('fitted'));
});

print(fittedHarmonic);

// Plot the fitted model and the original data at the ROI.
print(ui.Chart.image.series(fittedHarmonic.select(['fitted','EVI']), magabuyo, ee.Reducer.mean(), 30)
    .setOptions({
      title: 'Harmonic model: original and fitted values',
      lineWidth: 1,
      pointSize: 3,
}));

var fittedHarmonic = fittedHarmonic.select('fitted');

var fittedHarmonic_idx = fittedHarmonic.toList(fittedHarmonic.size());

Map.centerObject(magabuyo, 11);
Map.addLayer(magabuyo, {}, 'ROI');
Map.addLayer(ee.Image(fittedHarmonic_idx.get(114)).clip(region),{min:-1, max:1}, "LST");

// Export.image.toDrive({
//   image: stackCollection(fittedHarmonic).clip(region),
//   description: 'EVI_ls8_harmonic',
//   region: region,
//   scale: 30
//   });

